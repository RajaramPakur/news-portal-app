{"version":3,"sources":["components/home/MainHeader.js","components/form/LoginPage.js","components/home/MainContent.js","components/dashboard/UserDetail.js","components/dashboard/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["MainHeader","className","href","id","to","LoginPage","state","username","password","handleSubmit","e","preventDefault","console","log","handleOnChange","setState","target","name","value","handleWithRefs","refs","type","placeholder","ref","onChange","this","style","borderRadius","onClick","Component","MainContent","props","myname","UserDetail","match","params","Dashboard","backgroundColor","url","path","exact","component","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6d627a4a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nfunction MainHeader() {\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n      <a className=\"navbar-brand\" href=\"#\">\r\n        Express News\r\n      </a>\r\n\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav mr-auto\">\r\n          <li className=\"nav-item active\">\r\n            <NavLink className=\"nav-link\" to=\"/news-portal-app\">\r\n              Home <span className=\"sr-only\">(current)</span>\r\n            </NavLink>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <NavLink className=\"nav-link\" to=\"/login\">\r\n              Login\r\n            </NavLink>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <NavLink className=\"nav-link\" to=\"/dashboard\">\r\n              Dashboard\r\n            </NavLink>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default MainHeader;\r\n","import React, { Component } from \"react\";\r\nimport \"../assets/scss/custom.scss\";\r\n\r\n// const customStyle = {\r\n//   container: { color: \"red\", fontSize: \"40px\" },\r\n//   btn: { backgroundColor: \"red\", color: \"white\" },\r\n// };\r\n\r\nexport class LoginPage extends Component {\r\n  state = {\r\n    username: null,\r\n    password: null,\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    // if (e.target.username.value && e.target.password.value) {\r\n    //   this.setState({\r\n    //     username: e.target.username.value,\r\n    //     password: e.target.password.value,\r\n    //   });\r\n    // }\r\n    console.log(this.state);\r\n  };\r\n\r\n  handleOnChange = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  handleWithRefs = () => {\r\n    this.setState({\r\n      username: this.refs.username.value,\r\n      password: this.refs.password.value,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    // console.log(this.state);\r\n\r\n    return (\r\n      <div className=\"jumbotron\">\r\n        <h2 className=\"login-container\">Login Page</h2>\r\n        <form>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"username\"\r\n            ref=\"username\"\r\n            onChange={this.handleWithRefs}\r\n            style={{ borderRadius: \"10%\" }}\r\n          />\r\n          <br />\r\n          <br />\r\n          <input\r\n            type=\"password\"\r\n            placeholder=\"password\"\r\n            ref=\"password\"\r\n            onChange={this.handleWithRefs}\r\n          />\r\n          <br />\r\n          <br />\r\n          <button onClick={this.handleSubmit} className=\"login-btn\">\r\n            Login\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoginPage;\r\n","import React from \"react\";\r\n\r\nfunction MainContent(props) {\r\n  return (\r\n    <div className=\"jumbotron\">\r\n      Welcome {props.myname} to My News Portal Home\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MainContent;\r\n","import React from \"react\";\r\n\r\nfunction UserDetail(props) {\r\n  console.log(props);\r\n  return <div>My User id is : {props.match.params.id}</div>;\r\n}\r\n\r\nUserDetail.propTypes = {};\r\n\r\nexport default UserDetail;\r\n","import React, { Component } from \"react\";\r\nimport { NavLink, Switch, Route, Link } from \"react-router-dom\";\r\nimport UserDetail from \"./UserDetail\";\r\n\r\nexport class Dashboard extends Component {\r\n  render() {\r\n    let id = 3;\r\n    const { match } = this.props;\r\n    return (\r\n      <div className=\"row\">\r\n        <div className=\"col-3\" style={{ backgroundColor: \"#f4f4f4\" }}>\r\n          <br />\r\n          <Link to={`/dashboard/users/${id}`}>User 3rd</Link>\r\n          \r\n          <nav className=\"nav flex-column\">\r\n            <NavLink className=\"nav-link\" to={`${match.url}`}>\r\n              Home\r\n            </NavLink>\r\n            <NavLink className=\"nav-link \" to={`${match.url}/users`}>\r\n              Users\r\n            </NavLink>\r\n            <NavLink className=\"nav-link\" to={`${match.url}/news`}>\r\n              News\r\n            </NavLink>\r\n          </nav>\r\n        </div>\r\n        <div className=\"col-9 mt-3\">\r\n          <Switch>\r\n            <Route path={`${match.path}`} exact>\r\n              Hello Dashboard Home\r\n            </Route>\r\n            <Route path={`${match.path}/users`} exact>\r\n              Hello User\r\n            </Route>\r\n\r\n            <Route path={`${match.path}/users/:id`} component={UserDetail} />\r\n\r\n            <Route path={`${match.path}/news`}>Hello News</Route>\r\n          </Switch>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Dashboard;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport MainHeader from \"./components/home/MainHeader\";\nimport LoginPage from \"./components/form/LoginPage\";\nimport MainContent from \"./components/home/MainContent\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Dashboard from \"./components/dashboard/Dashboard\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <MainHeader />\n        <Route\n          path=\"/news-portal-app\"\n          component={(props) => <MainContent myname=\"Rajaram\" {...props} />}\n          exact\n        />\n        <Route path=\"/login\" component={LoginPage} />\n        <Route path=\"/dashboard\" component={Dashboard} />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}